<?php
/**
 * Slack API - users method implementation.
 *
 * @author        Hiroki Yagyu.
 * @link          https://github.com/HirokiYagyu/Slack
 * @package       Slack.Controller.Component
 * @since         SlackPlugin v1.0.0
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */
App::uses('BaseComponent', 'Slack.Controller/Component');

/**
 * Slack API Usergroups/Users コンポーネント.
 *
 * @package       Slack.Controller.Component
 */
class UsersComponent extends BaseComponent
{
    protected static $_method = 'usergroups.users';

    /** Authentication token. */
    const OPTION_TOKEN = 'token';

    /** Filter logs generated by this user’s actions. Defaults to all logs. */
    const OPTION_USER = 'user';

    /** Whether to include presence data in the output. */
    const OPTION_PRESENCE = 'presence';

    /**
     * ユーザの生存確認.
     *
     * @param string $user ユーザ ID.
     * @param array $option オプション.
     * @return mixed レスポンスデータ.
     *
     * @see https://api.slack.com/methods/users.presence
     */
    public function fetchPresence( $user, array $option=[] )
    {
        $requestData = [
            self::OPTION_TOKEN => Slack\API_TOKEN,
            self::OPTION_USER => $user,
        ];
        $requestData = array_merge( $requestData, $option );
        $response = self::getRequest( 'getPresence', self::_nullFilter($requestData) );
        return $response;
    }

    /**
     * ユーザ情報を取得する.
     *
     * @param string $user ユーザ ID.
     * @param array $option オプション.
     * @return mixed レスポンスデータ.
     *
     * @see https://api.slack.com/methods/users.info
     */
    public function fetchInfo( $user, array $option=[] )
    {
        $requestData = [
            self::OPTION_TOKEN => Slack\API_TOKEN,
            self::OPTION_USER => $user,
        ];
        $requestData = array_merge( $requestData, $option );
        $response = self::getRequest( 'info', self::_nullFilter($requestData) );
        return $response;
    }

    /**
     * リストを取得する.
     *
     * @param array $option オプション.
     * @return mixed レスポンスデータ.
     *
     * @see https://api.slack.com/methods/users.list
     */
    public function fetchList( array $option=[] )
    {
        $requestData = [
            self::OPTION_TOKEN => Slack\API_TOKEN,
            self::OPTION_PRESENCE => null,
        ];
        $requestData = array_merge( $requestData, $option );
        $response = self::getRequest( 'list', self::_nullFilter($requestData) );
        return $response;
    }

    /**
     * アクティブ化する.
     *
     * @param array $option オプション.
     * @return mixed レスポンスデータ.
     *
     * @see https://api.slack.com/methods/users.setActive
     */
    public function setActive( array $option=[] )
    {
        $requestData = [
            self::OPTION_TOKEN => Slack\API_TOKEN,
        ];
        $requestData = array_merge( $requestData, $option );
        $response = self::postRequest( 'setActive', self::_nullFilter($requestData) );
        return $response;
    }

    /**
     * Presence を設定する.
     *
     * @param string $presence プレゼンス. (<code>auto</code> or <code>away</code>)
     * @param array $option オプション.
     * @return mixed レスポンスデータ.
     *
     * @see https://api.slack.com/methods/users.setActive
     */
    public function setPresence( $presence, array $option=[] )
    {
        $requestData = [
            self::OPTION_TOKEN => Slack\API_TOKEN,
            self::OPTION_PRESENCE => $presence,
        ];
        $requestData = array_merge( $requestData, $option );
        $response = self::getRequest( 'setPresence', self::_nullFilter($requestData) );
        return $response;
    }
}
